const char * ch

const在*前面表示这是一个字符串常量指针，它所指向的字符串不能被修改，但是这个指针的指向可以改变，它和char const *ch是一样的，比如：


const char *ch="123";//指向常量字符串123,123的内容不能被修改，但可以改变ch的指向
ch="Hello World!";//可以改变ch的指向
如果const在*的后面，则表示这是一个指针常量，它的指向不能被修改，但可以修改批所指向的内容，比如：


char c[] = "123";  // 该出变量c就在指针常量，内存中为栈实现，不可以改变指向。
char * const ch=c; //ch的指向不能被修改，但它所指向的内容视情况可以被修改，
//比如由于c是个字符数组，所以，可以通过ch修改c数组的值
ch[0]='4';//修改c[0]为4,c变成"423"
看到一份编程规范说：
如果函数参数是指针，且仅作输入用，则必须在类型前面加上const，以用来防止该指针在函数体内被意外修改。

举个最简单的例子吧,试试能编译通过吗：



void print(char *str)
 {
    printf("%s\n", str);
}
const char *str = "hello world";
print(str);

当参数是char *时不能接受const char *类型的参数，而当参数类型是const char *时，可以接受char *、const char *;也就是提高了代码的参数的可接受范围。

--------------------- 
作者：Tonyswift 
来源：CSDN 
原文：https://blog.csdn.net/takejian/article/details/79751399 
版权声明：本文为博主原创文章，转载请附上博文链接！
